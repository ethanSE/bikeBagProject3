[{"/Users/ethan/Desktop/bike-bag-project3/src/reportWebVitals.ts":"1","/Users/ethan/Desktop/bike-bag-project3/src/components/ImageUpload.jsx":"2","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Front.js":"3","/Users/ethan/Desktop/bike-bag-project3/src/components/Account.js":"4","/Users/ethan/Desktop/bike-bag-project3/src/actions.js":"5","/Users/ethan/Desktop/bike-bag-project3/src/aws-exports.js":"6","/Users/ethan/Desktop/bike-bag-project3/src/context.js":"7","/Users/ethan/Desktop/bike-bag-project3/src/components/StyleSelection.jsx":"8","/Users/ethan/Desktop/bike-bag-project3/src/components/ScaleInput.jsx":"9","/Users/ethan/Desktop/bike-bag-project3/src/components/ShapeInput.jsx":"10","/Users/ethan/Desktop/bike-bag-project3/src/components/Header.jsx":"11","/Users/ethan/Desktop/bike-bag-project3/src/components/Home.jsx":"12","/Users/ethan/Desktop/bike-bag-project3/src/components/CustomSpecification.jsx":"13","/Users/ethan/Desktop/bike-bag-project3/src/components/App.js":"14","/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useUIStateManager.js":"15","/Users/ethan/Desktop/bike-bag-project3/src/graphql/queries.js":"16","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Toptube.js":"17","/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useWindowWidth.js":"18","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Full.js":"19","/Users/ethan/Desktop/bike-bag-project3/src/graphql/mutations.js":"20","/Users/ethan/Desktop/bike-bag-project3/src/index.js":"21","/Users/ethan/Desktop/bike-bag-project3/src/components/History.tsx":"22","/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useDesignManager.js":"23","/Users/ethan/Desktop/bike-bag-project3/src/graphql/subscriptions.js":"24"},{"size":425,"mtime":1610494620203,"results":"25","hashOfConfig":"26"},{"size":2134,"mtime":1610495166973,"results":"27","hashOfConfig":"26"},{"size":949,"mtime":1610495029592,"results":"28","hashOfConfig":"26"},{"size":3526,"mtime":1612674517525,"results":"29","hashOfConfig":"26"},{"size":1026,"mtime":1612213372273,"results":"30","hashOfConfig":"26"},{"size":1241,"mtime":1614024359864,"results":"31","hashOfConfig":"26"},{"size":242,"mtime":1612222073528,"results":"32","hashOfConfig":"26"},{"size":1488,"mtime":1610495156963,"results":"33","hashOfConfig":"26"},{"size":4361,"mtime":1612560853020,"results":"34","hashOfConfig":"26"},{"size":5837,"mtime":1612685138232,"results":"35","hashOfConfig":"26"},{"size":1246,"mtime":1610741159088,"results":"36","hashOfConfig":"26"},{"size":2359,"mtime":1612560208570,"results":"37","hashOfConfig":"26"},{"size":1166,"mtime":1612560480794,"results":"38","hashOfConfig":"26"},{"size":2392,"mtime":1612687703237,"results":"39","hashOfConfig":"26"},{"size":1834,"mtime":1610494811607,"results":"40","hashOfConfig":"26"},{"size":832,"mtime":1612683440613,"results":"41","hashOfConfig":"26"},{"size":1166,"mtime":1610495029605,"results":"42","hashOfConfig":"26"},{"size":520,"mtime":1610494811609,"results":"43","hashOfConfig":"26"},{"size":723,"mtime":1610495029596,"results":"44","hashOfConfig":"26"},{"size":1252,"mtime":1612683440639,"results":"45","hashOfConfig":"26"},{"size":510,"mtime":1610580944744,"results":"46","hashOfConfig":"26"},{"size":7249,"mtime":1611860901784,"results":"47","hashOfConfig":"26"},{"size":3591,"mtime":1612674582984,"results":"48","hashOfConfig":"26"},{"size":934,"mtime":1612683440660,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ptdphk",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/ethan/Desktop/bike-bag-project3/src/reportWebVitals.ts",[],["106","107"],"/Users/ethan/Desktop/bike-bag-project3/src/components/ImageUpload.jsx",[],["108","109"],"/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Front.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/Account.js",["110","111"],"import React, { useContext, useEffect, useRef } from 'react';\nimport { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport * as styles from '../styles/Account.module.css'\n//actions\nimport { drawPoints, drawLines } from '../actions'\nimport { SavedDesignsContext, ModeContext } from '../context';\n//graphql\nimport { deleteDesign } from '../graphql/mutations';\n\nexport default function Account() {\n    return (\n        <div className={styles.accountContainer}>\n            <DesignList />\n        </div>\n    )\n}\n\nconst DesignList = () => {\n    const { designs, status, refresh } = useContext(SavedDesignsContext);\n\n    switch (status) {\n        case 'done':\n            return (\n                <div className={styles.designListContainer}>\n                    <h1>Your saved designs</h1>\n\n                    <CreateDesignButton status={status} designCount={designs.length} />\n\n                    { designs.map((design) => <DesignItem design={design} key={design.id} />)}\n                </div >\n            )\n        case 'loading':\n            return (\n                <p>loading</p>\n            );\n        default:\n            return (\n                <div>\n                    <button className={styles.button} onClick={refresh}>RELOAD</button>\n                </div>\n            )\n    }\n}\n\nconst DesignItem = (props) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        Storage.get(props.design.image.key)\n            .then((url) => drawCanvas(url))\n            .catch((err) => console.log('error fetching image', err))\n    }, [])\n\n    const drawCanvas = (imageUrl) => {\n        //draws image on canvas\n        let ctx = canvasRef.current.getContext('2d');\n        var img = new Image;\n        img.src = imageUrl;\n        img.onload = () => {\n            if (canvasRef?.current) {\n                //user may have navigated away while one or more image was loading\n                canvasRef.current.height = img.height / img.width * canvasRef.current.width;\n                ctx.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height);\n                let displayScaleFactor = canvasRef.current.width / img.width;\n                //draw points and lines\n                drawPoints(canvasRef, props.design.points, displayScaleFactor);\n                drawLines(canvasRef, props.design.points, displayScaleFactor);\n            }\n        }\n    }\n\n    async function deleteDesignMut() {\n        console.log(props.design)\n        try {\n            await API.graphql(graphqlOperation(deleteDesign, { input: { id: props.design.id, _version: props.design._version } }))\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    return (\n        <div className={styles.design}>\n            <p>id = {props.design.id}</p>\n            <canvas ref={canvasRef} className={styles.canvas} />\n            <button className={styles.button} onClick={deleteDesignMut}>DELETE</button>\n        </div>\n    )\n}\n\nconst CreateDesignButton = (props) => {\n    const { setActiveMainComponent } = useContext(ModeContext)\n\n    if (props.status !== 'done' || props.designCount > 0) {\n        return null\n    }\n\n    return (\n        <div className={styles.createDesignContainer}>\n            <p>You have no saved designs</p>\n            <div className={styles.button} onClick={() => setActiveMainComponent('customSpec')}>\n                <p>create</p>\n            </div>\n        </div>\n    )\n}\n\n//click to *order* changes to in progress\n//download svg for each design\n//ability to delete each design\n//logout","/Users/ethan/Desktop/bike-bag-project3/src/actions.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/aws-exports.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/context.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/StyleSelection.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/ScaleInput.jsx",["112"],"import React, { useRef, useContext, useEffect, useState } from 'react';\n//hooks\nimport { useWindowWidth } from '../customHooks/useWindowWidth'\n//context\nimport { CustomSpecContext } from '../context';\n//actions\nimport { drawPoints, drawLines } from '../actions'\n//styles\nimport styles from '../styles/ScaleInput.module.css'\n\nexport default function ScaleInput() {\n    const { customSpecUIState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n    switch (customSpecUIState.scale) {\n        case 'active':\n            return <ScaleInputActive />\n        case 'minimized':\n            return (\n                <div className={styles.minimized} onClick={() => setActiveCustomSpecPhase('scale')}>\n                    <h3>Scale</h3>\n                </div>\n            )\n        default:\n            return null;\n    }\n}\n\nconst ScaleInputActive = () => {\n    const [windowWidth] = useWindowWidth(0)\n    const [topTubePoints, setTopTubePoints] = useState([]);\n    const [sourceDimensions, setSourceDimensions] = useState(null);\n    const { setCustomSpecState, customSpecState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n    let canvasScaleRef = useRef();\n    let scaleInputRef = useRef();\n    let scaleInputDivRef = useRef();\n    let ctx;\n\n    useEffect(() => {\n        setTimeout(() => {\n            window.scroll({\n                top: scaleInputDivRef.current.offsetTop,\n                behavior: \"smooth\",\n            });\n        }, 0);\n    }, [])\n\n    //loads image onto canvas and calls drawTopTubePoints\n    const drawCanvas = () => {\n        if (!sourceDimensions) {\n            setSourceDimensions({ imageHeight: customSpecState.image.height, imageWidth: customSpecState.image.width });\n        }\n        //recalculates in case windown size changed\n        let displayScaleFactor = scaleInputDivRef.current.clientWidth / customSpecState.image.width;\n        canvasScaleRef.current.width = customSpecState.image.width * displayScaleFactor;\n        canvasScaleRef.current.height = customSpecState.image.height * displayScaleFactor;\n        ctx = canvasScaleRef.current.getContext('2d');\n        ctx.drawImage(customSpecState.image, 0, 0, canvasScaleRef.current.width, canvasScaleRef.current.height); //draws image on canvas\n        drawPoints(canvasScaleRef, topTubePoints, displayScaleFactor)\n        drawLines(canvasScaleRef, topTubePoints, displayScaleFactor)\n    }\n\n    //draws the image and points on the canvas when window width or points changes\n    useEffect(() => {\n        drawCanvas();\n    }, [windowWidth, topTubePoints])\n\n    //captures user click on the canvas and converts to pixel coordinates of original image\n    const canvasScaleClick = (evt) => {\n        let displayScaleFactor = scaleInputDivRef.current.clientWidth / sourceDimensions.imageWidth;\n        if (topTubePoints.length < 2) {\n            let rect = canvasScaleRef.current.getBoundingClientRect();\n            let x = (evt.clientX - rect.left);\n            let y = (evt.clientY - rect.top);\n            let xSourceCoord = x / displayScaleFactor;\n            let ySourceCoord = y / displayScaleFactor;\n            setTopTubePoints([...topTubePoints, {x: xSourceCoord, y: ySourceCoord}]);\n        }\n    }\n\n    //establishes a ratio of source image pixels to inches\n    const setPixelToInchScale = (event) => {\n        event.preventDefault();\n        if (topTubePoints.length === 2) {\n            let distance = Math.hypot(topTubePoints[0].x - topTubePoints[1].x, topTubePoints[0].y - topTubePoints[1].y)\n            let scale = (distance / scaleInputRef.value);\n            setCustomSpecState({ ...customSpecState, scale: scale })\n            setActiveCustomSpecPhase('shape');\n        }\n    }\n\n    return (\n        <div className={styles.scaleInput} ref={scaleInputDivRef} style={{ minHeight: '50vh' }}>\n            <h3>Scale</h3>\n            <form onSubmit={setPixelToInchScale} className={styles.scaleInputForm}>\n                <input ref={(input) => { scaleInputRef = input }} placeholder='Top Tube Length in inches' type='number' />\n                <button className={styles.button} type='submit'>Submit</button>\n                <button className={styles.button} onClick={() => setTopTubePoints([])}>Reset</button>\n            </form>\n            <canvas ref={canvasScaleRef} width='0' height='0' onClick={canvasScaleClick} />\n        </div>\n    )\n}","/Users/ethan/Desktop/bike-bag-project3/src/components/ShapeInput.jsx",["113"],"import React, { useRef, useContext, useEffect, useState } from 'react';\n//hooks\nimport { useWindowWidth } from '../customHooks/useWindowWidth'\nimport styles from '../styles/ShapeInput.module.css'\n//context\nimport { CustomSpecContext, ModeContext, UserContext } from '../context';\n//actions\nimport { drawPoints, drawLines } from '../actions'\n//graphql\nimport { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport { createDesign } from '../graphql/mutations'\n//uuid\nimport { v4 as uuid } from 'uuid';\nimport config from '../aws-exports'\n\nconst {\n    aws_user_files_s3_bucket_region: region,\n    aws_user_files_s3_bucket: bucket\n} = config\n\nexport default function ShapeInput() {\n    const { customSpecUIState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n\n    switch (customSpecUIState.shape) {\n        case 'active':\n            return <ShapeInputActive />\n        case 'minimized':\n            return (\n                <div className={styles.minimized} onClick={() => setActiveCustomSpecPhase('shape')}>\n                    <h3>Shape</h3>\n                </div>\n            )\n        default:\n            return null;\n    }\n}\n\nconst ShapeInputActive = () => {\n    const { setActiveMainComponent } = useContext(ModeContext)\n    const { customSpecState, setActiveCustomSpecPhase } = useContext(CustomSpecContext);\n    const { user } = useContext(UserContext);\n    const [windowWidth] = useWindowWidth(0)\n    const [points, setPoints] = useState([]);\n    const [shapeInputSubmitActive, setShapeInputSubmitActive] = useState(true);\n    let canvasShapeRef = useRef();\n    let shapeInputDivRef = useRef();\n    let displayScaleFactor = useRef();\n\n    //draws the image and points on the canvas when window width or points changes\n    useEffect(() => {\n        drawCanvas();\n    }, [windowWidth, points])\n\n    //scrolls div to top of view port when first rendered\n    useEffect(() => {\n        setTimeout(() => {\n            window.scroll({\n                top: shapeInputDivRef.current.offsetTop,\n                behavior: \"smooth\",\n            });\n        }, 0);\n    }, [])\n\n    const drawCanvas = () => {\n        //set width of canvas to be equal to its parent div\n        canvasShapeRef.current.width = shapeInputDivRef.current.clientWidth;\n        //set height based on width and image ratio\n        displayScaleFactor.current = canvasShapeRef.current.width / customSpecState.image.width;\n        canvasShapeRef.current.height = displayScaleFactor.current * customSpecState.image.height;\n        //draws image on canvas\n        let ctx = canvasShapeRef.current.getContext('2d');\n        //draw points and lines\n        ctx.drawImage(customSpecState.image, 0, 0, canvasShapeRef.current.width, canvasShapeRef.current.height);\n        drawPoints(canvasShapeRef, points, displayScaleFactor.current);\n        drawLines(canvasShapeRef, points, displayScaleFactor.current);\n    }\n\n    //allows users to submit\n    const shapeInputSubmit = async () => {\n        //disable to prevent multiple submits\n        setShapeInputSubmitActive(false)\n\n        //do some kind of checking(?)\n        //is shape closed?\n        //number of points(?)\n        await uploadDesign(customSpecState.imageRaw, points, customSpecState.scale, user.attributes.sub);\n        setActiveMainComponent('account')\n        setActiveCustomSpecPhase('clear');\n    }\n\n    // allows user to select points\n    const canvasShapeClick = (evt) => {\n        //get display coordinate of click\n        let rect = canvasShapeRef.current.getBoundingClientRect();\n        let x = (evt.clientX - rect.left);\n        let y = (evt.clientY - rect.top);\n        //transform to source coordinate\n        let xSourceCoord = x * customSpecState.image.width / canvasShapeRef.current.width;\n        let ySourceCoord = y * customSpecState.image.height / canvasShapeRef.current.height;\n\n        //loop through points if the new click is within the circle drawn around and existing point\n        //it should be the same point\n        points.forEach((point) => {\n            //get distance froim click to point\n            let xDistance = point.x * displayScaleFactor.current - xSourceCoord * displayScaleFactor.current;\n            let yDistance = point.y * displayScaleFactor.current - ySourceCoord * displayScaleFactor.current\n            let distance = Math.hypot(xDistance, yDistance);\n            // if click is within drawn circle\n            if (distance < 10) {\n                //add that same point to the array\n                setPoints([...points, point]);\n                return;\n            };\n        });\n\n        setPoints([...points, { x: xSourceCoord, y: ySourceCoord }]);\n    }\n\n    return (\n        <div className={styles.shapeInput} ref={shapeInputDivRef} style={{ minHeight: '50vh' }}>\n            <h3>Shape</h3>\n            <div className={styles.buttonRow}>\n                <button className={styles.button} onClick={shapeInputSubmitActive && shapeInputSubmit}>Submit Design</button>\n                <button className={styles.button} onClick={() => setPoints([])}>Reset Shape</button>\n            </div>\n            <canvas ref={canvasShapeRef} width='0' height='0' onClick={canvasShapeClick} />\n        </div>\n    )\n}\n\nconst uploadDesign = async (image, shape, scale, userId) => {\n    try {\n        //upload image\n        let { key } = await Storage.put(`${uuid()}`, image, { contentType: 'image/png' })\n        //create new bag object\n        const newBag = {\n            id: `${uuid()}`,\n            owner: userId,\n            image: {\n                bucket: bucket,\n                region: region,\n                key: key,\n            },\n            scale: scale,\n            points: shape\n        }\n        //store in dynamoDB\n        await API.graphql(graphqlOperation(createDesign, { input: newBag }));\n    } catch (e) {\n        console.log(e)\n    }\n}","/Users/ethan/Desktop/bike-bag-project3/src/components/Header.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/Home.jsx",["114"],"import React, { useContext } from 'react';\nimport { ModeContext } from '../context';\nimport styles from '../styles/Home.module.css';\nimport BackupIcon from '@material-ui/icons/Backup';\nimport SquareFootIcon from '@material-ui/icons/SquareFoot';\nimport CreateIcon from '@material-ui/icons/Create';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n\nconst Home = () => {\n    const { setActiveMainComponent } = useContext(ModeContext);\n    return (\n        <div className={styles.home}>\n            <h1>How it works</h1>\n            <div className={styles.iconDescContainer}>\n                <div className={styles.bigScreenReverseRow}>\n                    <div className={styles.icon}>\n                        <BackupIcon fontSize={'inherit'} color={'inherit'} />\n                    </div>\n\n                    <div className={styles.text}>\n                        <p>1. Upload an image of your bike</p>\n                    </div>\n                </div>\n\n                <div className={styles.row}>\n                    <div className={styles.icon}>\n                        <SquareFootIcon fontSize={'inherit'} color={'inherit'} />\n                    </div>\n                    <div className={styles.text}>\n                        <p>2. Measure your bike to establish the scale</p>\n                    </div>\n                </div>\n\n                <div className={styles.bigScreenReverseRow}>\n                    <div className={styles.icon}>\n                        <CreateIcon fontSize={'inherit'} color={'inherit'} />\n                    </div>\n\n                    <div className={styles.text}>\n                        <p>3. Outline your desired shape</p>\n                    </div>\n                </div>\n\n                <div className={styles.row}>\n                    <div className={styles.icon}>\n                        <AddShoppingCartIcon fontSize={'inherit'} color={'inherit'} />\n                    </div>\n                    <div className={styles.text}>\n                        <p>4. Submit your design and receive your custom bike frame bag</p>\n                    </div>\n                </div>\n            </div>\n            <button className={styles.button} onClick={() => setActiveMainComponent('customSpec')}> create custom bag</button>\n        </div>\n    )\n}\n\nconst HowItWorks = () => {\n    \n}\n\nexport default Home;","/Users/ethan/Desktop/bike-bag-project3/src/components/CustomSpecification.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/App.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useUIStateManager.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/graphql/queries.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Toptube.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useWindowWidth.js",["115"],"import { debounce } from '../actions';\nimport {useState, useEffect} from 'react'\n\nexport function useWindowWidth(debounceTimer) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        window.addEventListener('resize', debounce(() => setWindowWidth(window.innerWidth), debounceTimer));\n        return () => {\n            window.removeEventListener('resize', debounce(() => setWindowWidth(window.innerWidth), debounceTimer))\n        };\n    }, [])\n\n    return [windowWidth];\n};","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Full.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/graphql/mutations.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/index.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/History.tsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useDesignManager.js",["116","117"],"import { useState, useEffect, useReducer } from 'react';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { listDesigns } from '../graphql/queries';\nimport { onCreateDesign, onUpdateDesign, onDeleteDesign } from '../graphql/subscriptions';\n\nexport default function useDesignManager(user) {\n    const [designs, dispatch] = useReducer(reducer, [])\n    const [status, setStatus] = useState('loading');\n    const [subs, setSubs] = useState([])\n\n    useEffect(() => {\n        if (user) {\n            fetchDesigns();\n            setUpSubscriptions();\n        }\n        return () => {\n            subs.forEach((sub) => sub.unsubscribe())\n        }\n    }, [user])\n\n    const fetchDesigns = async () => {\n        try {\n            let result = await API.graphql(graphqlOperation(listDesigns, {\n                filter: {\n                    owner: {\n                        eq: user.attributes.sub\n                    }\n                }\n            }));\n            dispatch({ type: 'addDesigns', value: result.data.listDesigns.items });\n            setStatus('done');\n        } catch (e) {\n            setStatus('failed');\n            console.log(e);\n        }\n    }\n\n    const setUpSubscriptions = () => {\n        //subscribe to new design event\n        let newDesignSub = API.graphql(graphqlOperation(onCreateDesign))\n            .subscribe({\n                next: (newDesignResult) => {\n                    const newDesign = newDesignResult.value.data.onCreateDesign;\n                    dispatch({ type: 'addDesigns', value: [newDesign] });\n                },\n                error: (error) => console.log(error)\n            })\n        //subscribe to design update event\n        let updateDesignSub = API.graphql(graphqlOperation(onUpdateDesign))\n            .subscribe({\n                next: (updatedDesignResult) => {\n                    const updatedDesign = updatedDesignResult.value.data.onUpdateDesign;\n                    //dispatch update action\n                    dispatch({ type: 'updateDesign', value: updatedDesign });\n                },\n                error: (error) => console.log(error)\n            })\n\n        let deleteDesignSub = API.graphql(graphqlOperation(onDeleteDesign))\n            .subscribe({\n                next: (deletedDesignResult) => {\n                    const deletedDesign = deletedDesignResult.value.data.onDeleteDesign;\n                    dispatch({ type: 'deleteDesign', value: deletedDesign});\n                }\n            })\n        setSubs([newDesignSub, updateDesignSub, deleteDesignSub])\n    }\n\n    const refresh = async () => {\n        setStatus('loading');\n        fetchDesigns();\n    }\n\n    return [designs, status, refresh]\n}\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'addDesigns':\n            //enforce uniqueness of new design\n            //i've seen the resolver fire more than one event for the same action\n            //not sure why\n            if (!state.some((design) => design.id === action.value.id)) {\n                return [...state, ...action.value].filter((item) => !item._deleted).sort((a, b) => Date.parse(a.createdAt) > Date.parse(b.createdAt) ? 1 : -1)\n            } else {\n                return state;\n            }\n        case 'updateDesign':\n            let newState = state;\n            newState[newState.findIndex((item) => item.id === action.value.id)] = action.value;\n            return newState;\n        case 'deleteDesign':\n            return state.filter((item) => item.id != action.value.id)\n        default:\n            throw new Error('invalid action type');\n    }\n}","/Users/ethan/Desktop/bike-bag-project3/src/graphql/subscriptions.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":52,"column":8,"nodeType":"124","endLine":52,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":57,"column":19,"nodeType":"128","messageId":"129","endLine":57,"endColumn":28,"fix":"130"},{"ruleId":"122","severity":1,"message":"131","line":64,"column":8,"nodeType":"124","endLine":64,"endColumn":36,"suggestions":"132"},{"ruleId":"122","severity":1,"message":"131","line":52,"column":8,"nodeType":"124","endLine":52,"endColumn":29,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":58,"column":7,"nodeType":"136","messageId":"137","endLine":58,"endColumn":17},{"ruleId":"122","severity":1,"message":"138","line":11,"column":8,"nodeType":"124","endLine":11,"endColumn":10,"suggestions":"139"},{"ruleId":"122","severity":1,"message":"140","line":19,"column":8,"nodeType":"124","endLine":19,"endColumn":14,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":93,"column":51,"nodeType":"144","messageId":"145","endLine":93,"endColumn":53},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'drawCanvas' and 'props.design.image.key'. Either include them or remove the dependency array.","ArrayExpression",["148"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"149","text":"150"},"React Hook useEffect has a missing dependency: 'drawCanvas'. Either include it or remove the dependency array.",["151"],["152"],"no-unused-vars","'HowItWorks' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'debounceTimer'. Either include it or remove the dependency array.",["153"],"React Hook useEffect has missing dependencies: 'fetchDesigns' and 'subs'. Either include them or remove the dependency array.",["154"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},[1709,1709],"()",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [drawCanvas, props.design.image.key]",{"range":"165","text":"166"},"Update the dependencies array to be: [windowWidth, topTubePoints, drawCanvas]",{"range":"167","text":"168"},"Update the dependencies array to be: [windowWidth, points, drawCanvas]",{"range":"169","text":"170"},"Update the dependencies array to be: [debounceTimer]",{"range":"171","text":"172"},"Update the dependencies array to be: [fetchDesigns, subs, user]",{"range":"173","text":"174"},[1552,1554],"[drawCanvas, props.design.image.key]",[2531,2559],"[windowWidth, topTubePoints, drawCanvas]",[1796,1817],"[windowWidth, points, drawCanvas]",[487,489],"[debounceTimer]",[659,665],"[fetchDesigns, subs, user]"]