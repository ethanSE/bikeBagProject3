[{"/Users/ethan/Desktop/bike-bag-project3/src/reportWebVitals.ts":"1","/Users/ethan/Desktop/bike-bag-project3/src/components/ImageUpload.jsx":"2","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Front.js":"3","/Users/ethan/Desktop/bike-bag-project3/src/components/Account.js":"4","/Users/ethan/Desktop/bike-bag-project3/src/actions.js":"5","/Users/ethan/Desktop/bike-bag-project3/src/aws-exports.js":"6","/Users/ethan/Desktop/bike-bag-project3/src/context.js":"7","/Users/ethan/Desktop/bike-bag-project3/src/components/StyleSelection.jsx":"8","/Users/ethan/Desktop/bike-bag-project3/src/components/ScaleInput.jsx":"9","/Users/ethan/Desktop/bike-bag-project3/src/components/ShapeInput.jsx":"10","/Users/ethan/Desktop/bike-bag-project3/src/components/Header.jsx":"11","/Users/ethan/Desktop/bike-bag-project3/src/components/Home.jsx":"12","/Users/ethan/Desktop/bike-bag-project3/src/components/CustomSpecification.jsx":"13","/Users/ethan/Desktop/bike-bag-project3/src/components/App.js":"14","/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useUIStateManager.js":"15","/Users/ethan/Desktop/bike-bag-project3/src/graphql/queries.js":"16","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Toptube.js":"17","/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useWindowWidth.js":"18","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Full.js":"19","/Users/ethan/Desktop/bike-bag-project3/src/graphql/mutations.js":"20","/Users/ethan/Desktop/bike-bag-project3/src/index.jsx":"21"},{"size":425,"mtime":1610494620203,"results":"22","hashOfConfig":"23"},{"size":2134,"mtime":1610495166973,"results":"24","hashOfConfig":"23"},{"size":949,"mtime":1610495029592,"results":"25","hashOfConfig":"23"},{"size":1692,"mtime":1610495266339,"results":"26","hashOfConfig":"23"},{"size":1032,"mtime":1610495056093,"results":"27","hashOfConfig":"23"},{"size":1246,"mtime":1610561730458,"results":"28","hashOfConfig":"23"},{"size":190,"mtime":1610494940260,"results":"29","hashOfConfig":"23"},{"size":1488,"mtime":1610495156963,"results":"30","hashOfConfig":"23"},{"size":4529,"mtime":1610495175861,"results":"31","hashOfConfig":"23"},{"size":6258,"mtime":1610495768151,"results":"32","hashOfConfig":"23"},{"size":1165,"mtime":1610580359547,"results":"33","hashOfConfig":"23"},{"size":2331,"mtime":1610495242882,"results":"34","hashOfConfig":"23"},{"size":1172,"mtime":1610495252020,"results":"35","hashOfConfig":"23"},{"size":2015,"mtime":1610495125880,"results":"36","hashOfConfig":"23"},{"size":1834,"mtime":1610494811607,"results":"37","hashOfConfig":"23"},{"size":842,"mtime":1610530955662,"results":"38","hashOfConfig":"23"},{"size":1166,"mtime":1610495029605,"results":"39","hashOfConfig":"23"},{"size":520,"mtime":1610494811609,"results":"40","hashOfConfig":"23"},{"size":723,"mtime":1610495029596,"results":"41","hashOfConfig":"23"},{"size":1300,"mtime":1610530955688,"results":"42","hashOfConfig":"23"},{"size":510,"mtime":1610580016122,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1fnooir",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/ethan/Desktop/bike-bag-project3/src/reportWebVitals.ts",[],["93","94"],"/Users/ethan/Desktop/bike-bag-project3/src/components/ImageUpload.jsx",[],["95","96"],"/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Front.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/Account.js",["97","98","99"],"import React, { useEffect, useContext, useState } from 'react';\n//graphql\nimport { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport { listCustomDesigns } from '../graphql/queries'\nimport { UserContext } from '../context';\n\nexport default function Account() {\n    const { user } = useContext(UserContext)\n    const [designs, setDesigns] = useState([])\n\n    useEffect(() => {\n        fetchDesigns();\n    }, [])\n\n    const fetchDesigns = async () => {\n        console.log(user)\n        let result = await API.graphql(graphqlOperation(listCustomDesigns, {\n            filter: {\n                owner: {\n                    eq: user.attributes.sub\n                }\n            }\n        }));\n        console.log(result)\n        setDesigns(result.data.listCustomDesigns.items)\n    }\n\n    return (\n        <div>\n            <h1>Your saved designs</h1>\n            <DesignList designs={designs} />\n        </div>\n    )\n}\n\nconst DesignList = (props) => {\n    const listItems = props.designs.map((design) =>\n        <li><DesignItem design={design} key={design.id} /></li>\n    );\n\n    return (\n        <ul>{listItems}</ul>\n    )\n}\n\nconst DesignItem = (props) => {\n    const [imageUrl, setImageUrl] = useState()\n    useEffect(() => {\n        Storage.get(props.design.image.key)\n            .then((url) => setImageUrl(url))\n            .catch((err) => console.log('error fetching image', err))\n    }, [])\n    return (\n        <div>\n            <p>this is a design. id = ${props.design.id}</p>\n            <img src={imageUrl} />\n        </div>\n    )\n}\n\n\n\n//view your saved designs\n//click to *order* changes to in progress\n//download svg for each design\n//ability to delete each design\n//logout","/Users/ethan/Desktop/bike-bag-project3/src/actions.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/aws-exports.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/context.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/StyleSelection.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/ScaleInput.jsx",["100"],"import React, { useRef, useContext, useEffect, useState } from 'react';\n//hooks\nimport { useWindowWidth } from '../customHooks/useWindowWidth'\n//context\nimport { CustomSpecContext } from '../context';\n//actions\nimport { drawPoints, drawLines } from '../actions'\n//styles\nimport styles from '../styles/ScaleInput.module.css'\n\nexport default function ScaleInput() {\n    const { customSpecUIState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n    switch (customSpecUIState.scale) {\n        case 'active':\n            return <ScaleInputActive />\n        case 'minimized':\n            return (\n                <div className={styles.minimized} onClick={() => setActiveCustomSpecPhase('scale')}>\n                    <h3>Scale</h3>\n                </div>\n            )\n        default:\n            return null;\n    }\n}\n\nconst ScaleInputActive = () => {\n    const [windowWidth] = useWindowWidth(50)\n    const [topTubePoints, setTopTubePoints] = useState([]);\n    const [sourceDimensions, setSourceDimensions] = useState(null);\n    const { setCustomSpecState, customSpecState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n    let canvasScaleRef = useRef();\n    let scaleInputRef = useRef();\n    let scaleInputDivRef = useRef();\n    let ctx;\n\n    useEffect(() => {\n        setTimeout(() => {\n            window.scroll({\n                top: scaleInputDivRef.current.offsetTop,\n                behavior: \"smooth\",\n            });\n        }, 0);\n    }, [])\n\n    //loads image onto canvas and calls drawTopTubePoints\n    const drawCanvas = () => {\n        if (!sourceDimensions) {\n            setSourceDimensions({ imageHeight: customSpecState.image.height, imageWidth: customSpecState.image.width });\n        }\n        //recalculates in case windown size changed\n        let displayScaleFactor = scaleInputDivRef.current.clientWidth / customSpecState.image.width;\n        canvasScaleRef.current.width = customSpecState.image.width * displayScaleFactor;\n        canvasScaleRef.current.height = customSpecState.image.height * displayScaleFactor;\n        ctx = canvasScaleRef.current.getContext('2d');\n        ctx.drawImage(customSpecState.image, 0, 0, canvasScaleRef.current.width, canvasScaleRef.current.height); //draws image on canvas\n        drawPoints(canvasScaleRef, topTubePoints, displayScaleFactor)\n        drawLines(canvasScaleRef, topTubePoints, displayScaleFactor)\n    }\n\n    //draws the image and points on the canvas when window width or points changes\n    useEffect(() => {\n        drawCanvas();\n    }, [windowWidth, topTubePoints])\n\n    //captures user click on the canvas and converts to pixel coordinates of original image\n    const canvasScaleClick = (evt) => {\n        let displayScaleFactor = scaleInputDivRef.current.clientWidth / sourceDimensions.imageWidth;\n        if (topTubePoints.length < 2) {\n            let rect = canvasScaleRef.current.getBoundingClientRect();\n            let x = (evt.clientX - rect.left);\n            let y = (evt.clientY - rect.top);\n            let xSourceCoord = x / displayScaleFactor;\n            let ySourceCoord = y / displayScaleFactor;\n            if (topTubePoints.length === 1) {\n                setTopTubePoints([topTubePoints[0], [xSourceCoord, ySourceCoord]]);\n            } else {\n                setTopTubePoints([[xSourceCoord, ySourceCoord]]);\n            }\n        }\n    }\n\n    //establishes a ratio of source image pixels to inches\n    const setPixelToInchScale = (event) => {\n        event.preventDefault();\n        if (topTubePoints.length === 2) {\n            let distance = Math.hypot(topTubePoints[0][0] - topTubePoints[1][0], topTubePoints[0][1] - topTubePoints[1][1])\n            let scale = (distance / scaleInputRef.value);\n            setCustomSpecState({ ...customSpecState, scale: scale })\n            setActiveCustomSpecPhase('shape');\n        }\n    }\n\n    return (\n        <div className={styles.scaleInput} ref={scaleInputDivRef} style={{ minHeight: '50vh' }}>\n            <h3>Scale</h3>\n            <form onSubmit={(event) => setPixelToInchScale(event)} className={styles.scaleInputForm}>\n                <input ref={(input) => { scaleInputRef = input }} placeholder='Top Tube Length in inches' type='number' />\n                <button className={styles.button} type='submit'>Submit</button>\n                <button className={styles.button} onClick={() => setTopTubePoints([])}>Reset</button>\n            </form>\n            <canvas ref={canvasScaleRef} width='0' height='0' onClick={canvasScaleClick} />\n        </div>\n    )\n}","/Users/ethan/Desktop/bike-bag-project3/src/components/ShapeInput.jsx",["101","102"],"import React, { useRef, useContext, useEffect, useState } from 'react';\n//hooks\nimport { useWindowWidth } from '../customHooks/useWindowWidth'\nimport styles from '../styles/ShapeInput.module.css'\n//context\nimport { CustomSpecContext, ModeContext, UserContext } from '../context';\n\n//actions\nimport { drawPoints, drawLines } from '../actions'\n//graphql\nimport { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport { createCustomDesign } from '../graphql/mutations'\n//uuid\nimport { v4 as uuid } from 'uuid';\nimport config from '../aws-exports'\n\nconst {\n    aws_user_files_s3_bucket_region: region,\n    aws_user_files_s3_bucket: bucket\n} = config\n\nexport default function ShapeInput() {\n    const { customSpecUIState, setActiveCustomSpecPhase } = useContext(CustomSpecContext)\n\n    switch (customSpecUIState.shape) {\n        case 'active':\n            return <ShapeInputActive />\n        case 'minimized':\n            return (\n                <div className={styles.minimized} onClick={() => setActiveCustomSpecPhase('shape')}>\n                    <h3>Shape</h3>\n                </div>\n            )\n        default:\n            return null;\n    }\n}\n\nconst ShapeInputActive = () => {\n    const { setActiveMainComponent } = useContext(ModeContext)\n    const [windowWidth] = useWindowWidth(50)\n    const { customSpecState, setCustomSpecState, setActiveCustomSpecPhase } = useContext(CustomSpecContext);\n    const [points, setPoints] = useState([]);\n    const [sourceDimensions, setSourceDimensions] = useState(null);\n    const { user } = useContext(UserContext);\n    let canvasShapeRef = useRef();\n    let shapeInputDivRef = useRef();\n    let displayScaleFactor;\n\n    //draws the image and points on the canvas when window width or points changes\n    useEffect(() => {\n        drawCanvas();\n    }, [windowWidth, points])\n\n    useEffect(() => {\n        setTimeout(() => {\n            window.scroll({\n                top: shapeInputDivRef.current.offsetTop,\n                behavior: \"smooth\",\n            });\n        }, 0);\n    }, [])\n\n    const drawCanvas = () => {\n        //saves image source dimensions on first load\n        if (!sourceDimensions) {\n            setSourceDimensions({ imageHeight: customSpecState.image.height, imageWidth: customSpecState.image.width });\n        }\n        canvasShapeRef.current.width = shapeInputDivRef.current.clientWidth; //set width of canvas to be equal to its parent div\n        displayScaleFactor = canvasShapeRef.current.width / customSpecState.image.width;\n        canvasShapeRef.current.height = displayScaleFactor * customSpecState.image.height; //set height based on width and image ratio\n        let ctx = canvasShapeRef.current.getContext('2d');\n        ctx.drawImage(customSpecState.image, 0, 0, canvasShapeRef.current.width, canvasShapeRef.current.height); //draws image on canvas\n        drawPoints(canvasShapeRef, points, displayScaleFactor);\n        drawLines(canvasShapeRef, points, displayScaleFactor);\n    }\n\n    //allows users to submit\n    const shapeInputSubmit = async () => {\n        //do some kind of checking(?)\n        //is shape closed?\n        //number of points(?)\n        // setCustomSpecState({\n        //     ...customSpecState,\n        //     shape: points\n        // })\n        await uploadDesign({\n            ...customSpecState,\n            shape: points\n        });\n        setActiveCustomSpecPhase('clear');\n        setActiveMainComponent('account')\n    }\n\n    // allows user to select points\n    const canvasShapeClick = (evt) => {\n        //get display coordinate of click\n        let rect = canvasShapeRef.current.getBoundingClientRect();\n        let x = (evt.clientX - rect.left);\n        let y = (evt.clientY - rect.top);\n        //transform to source coordinate\n        let xSourceCoord = x * sourceDimensions.imageWidth / canvasShapeRef.current.width;\n        let ySourceCoord = y * sourceDimensions.imageHeight / canvasShapeRef.current.height;\n\n        //--abstract away with hook(?)\n        //check through existing points to see if click is on a previously selected point \n        //(ie. when closing the shape)\n        for (let i = 0; i < points.length; i++) {\n            let distance = Math.hypot(points[i][0] * displayScaleFactor - xSourceCoord * displayScaleFactor, points[i][1] * displayScaleFactor - ySourceCoord * displayScaleFactor);\n            if (distance < 10) {        //i.e. if click is within drawn circle\n                setPoints([...points, [points[i][0], points[i][1]]]); //add that same point to the array\n                return;\n            };\n        }\n        setPoints([...points, [xSourceCoord, ySourceCoord]]);\n    }\n\n    const uploadDesign = async (design) => {\n\n        //upload image\n        Storage.put(`${uuid()}`, customSpecState.imageRaw, {\n            contentType: 'image/png'\n        })\n            .then((result) => {\n                console.log('successfully saved file!', result)\n                createCustomBag(result)\n            })\n            .catch(err => console.log('issue with image upload!', err))\n        // const newBag = {\n\n        const createCustomBag = async (result) => {\n            const newBag = {\n                id: `${uuid()}`,\n                owner: user.attributes.sub,\n                image: {\n                    bucket: bucket,\n                    region: region,\n                    key: result.key,\n                },\n                scale: customSpecState.scale,\n                points: design.shape.toString(),\n                isOrdered: false\n            }\n\n            console.log('newBag', newBag)\n            const newExperienceResult = await API.graphql(graphqlOperation(createCustomDesign, { input: newBag }));\n            console.log(newExperienceResult)\n        }\n    }\n\n    return (\n        <div className={styles.shapeInput} ref={shapeInputDivRef} style={{ minHeight: '50vh' }}>\n            <h3>Shape</h3>\n            <div className={styles.buttonRow}>\n                <button className={styles.button} onClick={shapeInputSubmit}>Submit Design</button>\n                <button className={styles.button} onClick={() => setPoints([])}>Reset Shape</button>\n            </div>\n            <canvas ref={canvasShapeRef} width='0' height='0' onClick={canvasShapeClick} />\n        </div>\n    )\n}","/Users/ethan/Desktop/bike-bag-project3/src/components/Header.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/Home.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/CustomSpecification.jsx",[],"/Users/ethan/Desktop/bike-bag-project3/src/components/App.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useUIStateManager.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/graphql/queries.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Toptube.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/customHooks/useWindowWidth.js",["103"],"import { debounce } from '../actions';\nimport {useState, useEffect} from 'react'\n\nexport function useWindowWidth(debounceTimer) {\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth)\n    useEffect(() => {\n        window.addEventListener('resize', debounce(() => setWindowWidth(window.innerWidth), debounceTimer));\n        return () => {\n            window.removeEventListener('resize', debounce(() => setWindowWidth(window.innerWidth), debounceTimer))\n        };\n    }, [])\n\n    return [windowWidth];\n};","/Users/ethan/Desktop/bike-bag-project3/src/assets/images/Full.js",[],"/Users/ethan/Desktop/bike-bag-project3/src/graphql/mutations.js",[],["104","105"],"/Users/ethan/Desktop/bike-bag-project3/src/index.jsx",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":13,"column":8,"nodeType":"112","endLine":13,"endColumn":10,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":52,"column":8,"nodeType":"112","endLine":52,"endColumn":10,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":56,"column":13,"nodeType":"118","endLine":56,"endColumn":35},{"ruleId":"110","severity":1,"message":"119","line":64,"column":8,"nodeType":"112","endLine":64,"endColumn":36,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":42,"column":30,"nodeType":"123","messageId":"124","endLine":42,"endColumn":48},{"ruleId":"110","severity":1,"message":"119","line":53,"column":8,"nodeType":"112","endLine":53,"endColumn":29,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"126","line":11,"column":8,"nodeType":"112","endLine":11,"endColumn":10,"suggestions":"127"},{"ruleId":"106","replacedBy":"128"},{"ruleId":"108","replacedBy":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDesigns'. Either include it or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has a missing dependency: 'props.design.image.key'. Either include it or remove the dependency array.",["133"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'drawCanvas'. Either include it or remove the dependency array.",["134"],"no-unused-vars","'setCustomSpecState' is assigned a value but never used.","Identifier","unusedVar",["135"],"React Hook useEffect has a missing dependency: 'debounceTimer'. Either include it or remove the dependency array.",["136"],["130"],["131"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [fetchDesigns]",{"range":"147","text":"148"},"Update the dependencies array to be: [props.design.image.key]",{"range":"149","text":"150"},"Update the dependencies array to be: [windowWidth, topTubePoints, drawCanvas]",{"range":"151","text":"152"},"Update the dependencies array to be: [windowWidth, points, drawCanvas]",{"range":"153","text":"154"},"Update the dependencies array to be: [debounceTimer]",{"range":"155","text":"156"},[416,418],"[fetchDesigns]",[1400,1402],"[props.design.image.key]",[2532,2560],"[windowWidth, topTubePoints, drawCanvas]",[1801,1822],"[windowWidth, points, drawCanvas]",[487,489],"[debounceTimer]"]